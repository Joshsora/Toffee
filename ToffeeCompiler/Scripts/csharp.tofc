# C# generator script for the ToffeeCompiler utility
# Version: 1.0
# Author: Joshua Scott
#
#
#pattern REQUIRED_NAMESPACES
	#data RequiredNamespace
	#if HAS_REQUIRED_NAMESPACE
		using $REQUIRED_NAMESPACE;
		#if MORE_REQUIRED_NAMESPACE
			#repeat
		#endif
	#endif
#endpattern
#
#
#pattern DOCUMENTATION
	#writer indent on
	#if HAS_DOC
		/// <summary>
		/// $DOC_STRING
		/// </summary>
	#endif
	#writer newline 0
#endpattern
#
#
#pattern MODIFIERS
	#writer newline 0
	#writer indent off
	#data NextModifier
	#if HAS_MODIFIER
		#if LAST_MODIFIER
			ToffeeModifiers.$MODIFIER
		#else
			ToffeeModifiers.$MODIFIER | 
			#repeat
		#endif
	#endif
	#writer newline 1
	#writer indent on
#endpattern
#
#
#pattern PARAMETERS
	#writer newline 0
	#writer indent off
	#data NextParameter
	#if HAS_PARAMETER
		#if LAST_PARAMETER
			$PARAMETER_TYPE $PARAMETER_NAME
		#else
			$PARAMETER_TYPE $PARAMETER_NAME, 
			#repeat
		#endif
	#endif
	#writer newline 1
	#writer indent on
#endpattern
#
#
#pattern PARAMETERNAMES
	#writer newline 0
	#writer indent off
	#data NextParameter
	#if HAS_PARAMETER
		#if LAST_PARAMETER
			$PARAMETER_NAME
		#else
			$PARAMETER_NAME, 
			#repeat
		#endif
	#endif
	#writer newline 1
	#writer indent on
#endpattern
#
#
#pattern PROPERTY
	#data NextProperty
	#if HAS_PROPERTY
		#writer indent off
		$DOCUMENTATION
		#writer newline 1	
		#if TOFFEE_STRUCTURE
			[ToffeeStructureProperty($STRUCT_PROPERTY_NUMBER)]
		#else
			[ToffeeProperty($MODIFIERS)]
		#endif
		public $PROPERTY_TYPE $PROPERTY_NAME { get; set; }
		#if MORE_PROPERTIES
			
			#repeat
		#endif
	#endif
#endpattern
#
#
#pattern METHOD
	#data NextMethod
	#if HAS_METHOD
		#writer indent off
		$DOCUMENTATION
		#writer newline 1
		[ToffeeMethod($MODIFIERS)]
		public void $METHOD_NAME($PARAMETERS)
		{
			#writer indent forwards
			
			#writer indent backwards
		}
		
		/// <summary>
		/// Sends a '$METHOD_NAME' field update.
		/// </summary>
		public void Send$METHOD_NAME($PARAMETERS)
		{
			#writer indent forwards
			#if METHOD_HAS_PARAMETERS
			Definition.PrepareFieldUpdate(null, DistributedId, "$METHOD_NAME", $PARAMETERNAMES);
			#else
			Definition.PrepareFieldUpdate(null, DistributedId, "$METHOD_NAME");
			#endif
			#writer indent backwards
		}
		
		/// <summary>
		/// Calls both '$METHOD_NAME' and 'Send$METHOD_NAME'.
		/// </summary>
		public void Both$METHOD_NAME($PARAMETERS)
		{
			#writer indent forwards
			$METHOD_NAME($PARAMETERNAMES);
			Send$METHOD_NAME($PARAMETERNAMES);
			#writer indent backwards
		}
		#if HAS_MORE_METHODS
			
			#repeat
		#endif
	#endif
#endpattern
#
#
#pattern OBJECT
	[ToffeeClass("$NETWORK_NAME")]
	public partial class $IDENTIFIER : DistributedObject
	{
	#writer indent forwards
	#dopattern PROPERTY
	#if HAS_PROPERTY

	#endif
	#dopattern METHOD
	#writer indent backwards
	}
#endpattern
#
#
#pattern STRUCTURE_WRITE_TO
	#data NextProperty
	#if HAS_PROPERTY
		packet.Write($PROPERTY_NAME);
		#if MORE_PROPERTIES
			#repeat
		#endif
	#endif
#endpattern
#
#
#pattern STRUCTURE_READ_FROM
	#data NextProperty
	#if HAS_PROPERTY
		#if PROPERTY_IS_ARRAY
			$PROPERTY_NAME = ($PROPERTY_TYPE)iterator.$READ_METHOD();
		#else
			$PROPERTY_NAME = iterator.$READ_METHOD();
		#endif
		#if MORE_PROPERTIES
			#repeat
		#endif
	#endif
#endpattern
#
#
#pattern STRUCTURE
	[ToffeeStructure("$NETWORK_NAME")]
	public partial class $IDENTIFIER : IToffeeStructure
	{
	#writer indent forwards
	#dopattern PROPERTY

    public void WriteTo(ToffeePacket packet)
    {
		#writer indent forwards
		#dopattern STRUCTURE_WRITE_TO
		#writer indent backwards
    }

    public void ReadFrom(ToffeePacketIterator iterator)
    {
		#writer indent forwards
		#dopattern STRUCTURE_READ_FROM
		#writer indent backwards
    }
	#writer indent backwards
	}
#endpattern
#
#
#data Initial
#if HAS_INITIAL_DATA
	#if HAS_NAMESPACE
		#file begin $FOLDER/$IDENTIFIER.cs
	#else
		#file begin $IDENTIFIER.cs
	#endif
	#
	#
	/*
		This file was generated by the ToffeeCompiler utility.
	*/
	#
	#
	using Toffee.Core;
	using Toffee.Protocol.Objects;
	using Toffee.Protocol.Definitions;
	using Toffee.Protocol.Definitions.Attributes;
	using System.CodeDom.Compiler;
	#if HAS_REQUIRED_NAMESPACE
		#dopattern REQUIRED_NAMESPACES
	#endif

	#if HAS_NAMESPACE
		namespace $NAMESPACE
		{
		#writer indent forwards
	#endif
	#
	#writer indent off
	$DOCUMENTATION
	#writer newline 1
	#
	[GeneratedCode("ToffeeCompiler", "csharp")]	
	#if TOFFEE_OBJECT
		#dopattern OBJECT
	#elseif TOFFEE_SERVICE
	# [ToffeeService("$NETWORK_NAME")]
	# public class $IDENTIFIER
	#elseif TOFFEE_STRUCTURE
		#dopattern STRUCTURE
	#else
		#writer crash 1
	#endif
	#
	#if HAS_NAMESPACE
		#writer indent backwards
		}
	#endif
	#
	#file end
#endif
#if MORE_DATA_AVAILABLE
	#repeat
#endif
